# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build

on:
    push:
        branches: ["master", "main"]
    pull_request:
        branches: ["master", "main"]

permissions:
    contents: read
    pull-requests: read

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
    group: "${{ github.workflow }}-${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
    cancel-in-progress: true

jobs:
    lint:
        runs-on: ubuntu-latest
        timeout-minutes: 3
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-python@v4
              with:
                  python-version: "3.x"
            - run: pip install flake8

            - name: check Python syntax errors or undefined names
              run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            - name: check complexity and length # the GitHub editor is 127 chars wide
              run: flake8 . --count --max-complexity=12 --max-line-length=127 --statistics

    pypi:
        runs-on: ubuntu-latest
        timeout-minutes: 5
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-python@v4
              with:
                  python-version: "3.x"
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install build
            - run: sed -i -e "s/\${BUILD_SOURCEBRANCHNAME}/${{ github.head_ref || github.ref }}/" -e "s/\${BUILD_DATE}/$(date --iso-8601=seconds)/" run.py
            - name: Build package
              run: python -m build --sdist --wheel --outdir dist/

            - uses: actions/upload-artifact@v3
              with:
                  name: pypi
                  path: dist/
                  retention-days: 7

    pyinstaller:
        strategy:
            # fail-fast: false
            matrix:
                os: [windows, macos, ubuntu]
                python-version: ["2.7", "3.x"]
        runs-on: ${{ matrix.os }}-latest
        timeout-minutes: 8
        steps:
            - uses: actions/checkout@v3
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}
            - name: Install dependencies
              run: pip install pyinstaller${{ fromJSON('["","==3.6"]')[matrix.python-version == '2.7'] }}

            # Prepare build version and cert
            - name: Replace build version
              run: sed -i${{ fromJSON('["",".temp"]')[matrix.os == 'macos'] }} -e "s/\${BUILD_SOURCEBRANCHNAME}/${{ github.head_ref || github.ref }}/" -e "s/\${BUILD_DATE}/$(date --iso-8601=seconds)/" run.py
              shell: bash
            - name: Copy cert on ubuntu
              if: ${{ matrix.os == 'ubuntu' }}
              run: cp /etc/ssl/certs/ca-certificates.crt cert.pem && export SSL_CERT_FILE=${PWD}/cert.pem

            - run: python ./run.py -h

            - name: Package binary
              run: pyinstaller --noconfirm --clean ${{ fromJSON('["", "--onefile"]')[matrix.python-version == '2.7'] }} ./.build/ddns.spec

            - run: ./dist/ddns || test -e "config.json"
            - run: ./dist/ddns -h

            # Upload build result
            - uses: actions/upload-artifact@v3
              with:
                  name: ${{ matrix.os }}-py${{ matrix.python-version }}
                  path: dist/
                  retention-days: 14

    docker:
        runs-on: ubuntu-latest
        timeout-minutes: 5
        env:
            DOCKER_REPO: newfuture/ddns
            DOCKER_PLATFORMS: linux/amd64,linux/arm,linux/arm64

        steps:
            - uses: actions/checkout@v3
            - uses: docker/setup-qemu-action@v2
            - uses: docker/setup-buildx-action@v2
            - run: docker buildx build --output "type=image" --platform ${DOCKER_PLATFORMS} .
