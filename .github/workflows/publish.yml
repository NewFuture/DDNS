name: Publish

on:
  push:
    tags: [v*]

permissions:
  contents: read

jobs:
  publish-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment:
      name: publish
      url: https://hub.docker.com/r/newfuture/ddns
    permissions:
      packages: write
    env:
      DOCKER_BUILD_RECORD_UPLOAD: false
      arch: linux/amd64,linux/arm,linux/arm64
      # arch: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/riscv64,linux/s390x
    steps:
      - uses: actions/checkout@v4
      - run: sed -i -e "s#\${BUILD_VERSION}#${{ github.ref_name }}#" -e "s/\${BUILD_DATE}/$(date --iso-8601=seconds)/" run.py
      - uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ env.arch }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ghcr.io/newfuture/ddns
            newfuture/ddns
      - uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ env.arch }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  publish-pypi:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment:
      name: publish
      url: https://pypi.org/project/ddns/
    permissions:
      # IMPORTANT: this permission is mandatory for Trusted Publishing
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - run: sed -i -e "s#\${BUILD_VERSION}#${{ github.ref_name }}#" -e "s/\${BUILD_DATE}/$(date --iso-8601=seconds)/" run.py
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build package
        run: python -m build --sdist --wheel --outdir dist/
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

  build-binary:
    strategy:
      matrix:
        os: [macos, ubuntu, windows]
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: pip install pyinstaller

      - name: Replace build version
        run: sed -i.tmp -e "s#\${BUILD_VERSION}#${{ github.ref_name }}#" -e "s/\${BUILD_DATE}/$(date --iso-8601=seconds)/" run.py && rm run.py.tmp
        shell: bash
      - name: Copy cert on ubuntu
        if: runner.os == 'Linux'
        run: cp /etc/ssl/certs/ca-certificates.crt cert.pem && export SSL_CERT_FILE=${PWD}/cert.pem

      - run: python -O -m PyInstaller --noconfirm --clean .build/ddns.spec
      - run: ./dist/ddns || test -e config.json
      - run: ./dist/ddns -h

      - run: mv ./dist/ddns ./dist/ddns-osx
        if: runner.os == 'macOS'
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}
          path: dist/
          retention-days: 10

  github-release:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment:
      name: publish
      url: https://github.com/NewFuture/DDNS/releases/tag/${{ github.ref_name }}
    permissions:
      contents: write
    needs: [publish-docker, publish-pypi, build-binary]
    steps:
      - uses: actions/checkout@v4
      - run: sed -i -e "s#\${BUILD_VERSION}#${{ github.ref_name }}#" .release/README.md
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Upload files
        run: gh release upload ${{ github.ref_name }} .release/*.sh .release/*.bat dist/*/* --clobber
        env:
          GH_TOKEN: ${{ github.token }}
          
      - name: Generate release notes and append README.md
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release view ${{ github.ref_name }} --json body -q '.body' > .release/notes.md
          cat .release/README.md >> .release/notes.md
          gh release edit ${{ github.ref_name }} --notes-file .release/notes.md --latest --prerelease=false
